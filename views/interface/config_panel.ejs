<!-- PERSONALIZAR VENTANA -->
<div id="board" class="panel panel-success margintop20 paddingbottom20">
  <div class="panel-heading">
    <img style="max-width:150px;" src="/images/logo/logotipo.png">
  </div>
  <%- partial('config_menu.ejs')%>
</div>


<div class="margintop20 marginbottom20 floatright">
  <a href="/robot/index" class="btn btn-sm btn-success bottom-right"><i class="fa fa-home" aria-hidden="true"></i> My Robots</a>
  <a href="/interface/show/<%= interface.id %>" class="btn btn-sm btn-primary bottom-right"><i class="fa fa-gamepad" aria-hidden="true"></i> Take control</a>
</div>


<input id="_csrf" type="hidden" name="_csrf" value="<%= _csrf %>"/>


<script type="text/javascript">

  function get_max_top_left_panel() {

    var cord1 = max_top_left('[id^=button_custom_]');
    var cord2 = max_top_left('[id^=event_]');
    var cord3 = [];

    cord3[0] = (cord1[0] > cord2[0] ? cord1[0] : cord2[0]);
    cord3[1] = (cord1[1] > cord2[1] ? cord1[1] : cord2[1]);

    //console.log('Limit: ' + cord3[0] + ' - ' + cord3[1]);
    return [cord3[0] ,cord3[1] ];
  }


  function max_top_left(id){
    var top = 0, left = 0, inHeight = 0, inWidth = 0;
    $(id).each(function(){
      if ($(this).position().top >= top){
        inHeight = $(this).outerHeight() + 5;
        top = $(this).position().top;
        //console.log('New top limit: ' + $(this).position().top);
      }

      if ($(this).position().left >= left){
        inWidth = $(this).outerWidth() + 5;
        left = $(this).position().left;
        //console.log('New left limit: ' + $(this).position().left);
      }
    });

    console.log('Dims: ' + inWidth + ' - ' + inHeight);
    console.log('Limit: ' + left + ' - ' + top);

    left = left + inWidth;
    top = top + inHeight;

    return [left ,top ];
  }

  /*
  //Enable elements draggables
  $('[id^=button_]').draggable({cancel: false, containment: '#panel', scroll: false,

    stop: function(event, ui) {
      var pos_x = ui.position.left;
      var pos_y = ui.position.top;
      var id = this.id.replace('button_','');

      console.log('x: ' + pos_x + ' - y: ' + pos_y );
      //console.log('id: ' + id);

      $.ajax({
        type: "POST",
        url: "/action/update_position/",
        data: { x: pos_x, y: pos_y, id: id},
        beforeSend: function(xhr, settings){
          xhr.setRequestHeader('X-CSRF-Token', $("#_csrf").val());
        },

        success: function(data){
          console.log('bottom position updated');
        },

        error: function(xhr, status, text) {
          bootstrap_alert['danger'](xhr.responseText, 5000 );
        }

      });
    }
  });


  $('[id^=slider_]').draggable({cancel: false, containment: '#panel', scroll: false,

    stop: function(event, ui) {
      var pos_x = ui.position.left;
      var pos_y = ui.position.top;
      var id = this.id.replace('slider_','');

      console.log('x: ' + pos_x + ' - y: ' + pos_y );
      //console.log('id: ' + id);

      $.ajax({
        type: "POST",
        url: "/slider/update_position/",
        data: { x: pos_x, y: pos_y, id: id},
        beforeSend: function(xhr, settings){
          xhr.setRequestHeader('X-CSRF-Token', $("#_csrf").val());
        },

        success: function(data){
          console.log('slider position updated');
        },

        error: function(xhr, status, text) {
          bootstrap_alert['danger'](xhr.responseText, 5000 );
        }

      });
    }
  });


  //Enable elements draggables
  $('[id^=play_]').draggable({cancel: false, containment: '#panel', scroll: false,

    stop: function(event, ui) {
      var pos_x = ui.position.left;
      var pos_y = ui.position.top;
      var id = this.id.replace('play_','');

      console.log('x: ' + pos_x + ' - y: ' + pos_y );
      //console.log('id: ' + id);

      //Do the ajax call to the server
      $.ajax({
        type: "POST",
        url: "/video/update_position/",
        data: { x: pos_x, y: pos_y, id: id},
        beforeSend: function(xhr, settings){
          xhr.setRequestHeader('X-CSRF-Token', $("#_csrf").val());
        },

        success: function(data){
          console.log('video position updated');
        },

        error: function(xhr, status, text) {
          bootstrap_alert['danger'](xhr.responseText, 5000 );
        }

      });
    }
  });

  //Enable elements draggables
  $('[id^=event_]').draggable({cancel: false, containment: '#panel', scroll: false,

    stop: function(event, ui) {
      var pos_x = ui.position.left;
      var pos_y = ui.position.top;
      var id = this.id.replace('event_','');

      console.log('x: ' + pos_x + ' - y: ' + pos_y );
      //console.log('id: ' + id);

      //Do the ajax call to the server
      $.ajax({
        type: "POST",
        url: "/event/update_position/",
        data: { x: pos_x, y: pos_y, id: id},
        beforeSend: function(xhr, settings){
          xhr.setRequestHeader('X-CSRF-Token', $("#_csrf").val());
        },

        success: function(data){
          console.log('event position updated');
        },

        error: function(xhr, status, text) {
          bootstrap_alert['danger'](xhr.responseText, 5000 );
        }

      });
    }
  });
*/








  // target elements with the "draggable" class
  interact('.draggable')
    .draggable({
      // enable inertial throwing
      inertia: true,
      // keep the element within the area of it's parent
      restrict: {
        restriction: "parent",
        endOnly: true,
        elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
      },
      // enable autoScroll
      autoScroll: true,

      // call this function on every dragmove event
      onmove: dragMoveListener,
      // call this function on every dragend event
      onend: function (event) {
        var target = event.target;
        var pos_x = target.getAttribute('data-x');
        var pos_y = target.getAttribute('data-y');
        var id = target.getAttribute('id').replace('button_','');

        var elem = $('#' +target.getAttribute('id'))

        var p = elem.position()
        $.ajax({
          type: "POST",
          url: "/action/update_position",
          data: { x: p.left, y: p.top, id: id},
          beforeSend: function(xhr){
            xhr.setRequestHeader('X-CSRF-Token', $("#_csrf").val());
          },
          done: function () {
            console.log('bottom position updated');
          },
          success: function(data){
            console.log('bottom position updated');
          },

          error: function(xhr, status, text) {
            bootstrap_alert['danger'](xhr.responseText, 5000 );
          }
        });

      }
    });

  function dragMoveListener (event) {
    var target = event.target,
      // keep the dragged position in the data-x/data-y attributes
      x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
      y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

    // translate the element
    target.style.webkitTransform =
      target.style.transform =
        'translate(' + x + 'px, ' + y + 'px)';

    // update the posiion attributes
    target.setAttribute('data-x', x);
    target.setAttribute('data-y', y);
  }

  // this is used later in the resizing and gesture demos
  window.dragMoveListener = dragMoveListener;






  // http://jsfiddle.net/dzSRR/32/  ejemplo drag con limites
  $("#panel").resizable({
    maxWidth: $("#box_panel").width(),

    create: function(){
      $(this).width(<%= interface.panel_sizex %>);
      $(this).height(<%= interface.panel_sizey %>);
    },

    resize: function(){
      pos = get_max_top_left_panel();
      console.log(pos[0] + '-' + pos[1]);
      $(this).css("min-width", pos[0]);
      $(this).css("min-height", pos[1]);
    },

    stop: function(event, ui) {
      var width = ui.size.width;
      var height = ui.size.height;
      var id = "<%= interface.id %>";

      //Tam en px eliminar 'px'
      var min_w = $("#panel").css("minWidth").replace(/[^-\d\.]/g, '');
      var min_h = $("#panel").css("minHeight").replace(/[^-\d\.]/g, '');

      //console.log('new board size: ' + width + ' - ' + height );
      console.log('valores minimos permitidos: ' + min_w + '-'  + min_h);

      //Nunca menor que el tama√±o minimo
      if(width < min_w){
        width = min_w;
      }
      if(height < min_h){
        height = min_h;
      }

      //Do the ajax call to the server

      $.ajax({
        type: "POST",
        url: "/interface/update_board_size/",
        data: { width: width, height: height, id: id},
        beforeSend: function(xhr, settings){
          xhr.setRequestHeader('X-CSRF-Token', $("#_csrf").val());
        },

        done: function(){

        },

        success: function(data){
          console.log('board size updated');
        },

        error: function(xhr, status, text) {
          bootstrap_alert['danger'](xhr.responseText, 5000 );
        }
      });
    }

  });

</script>
<!-- FIN PERSONALIZAR VENTANA -->
